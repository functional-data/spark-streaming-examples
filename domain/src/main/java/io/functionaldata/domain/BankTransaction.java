/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.functionaldata.domain;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BankTransaction extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5626703978154781278L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BankTransaction\",\"namespace\":\"io.functionaldata.domain\",\"fields\":[{\"name\":\"date\",\"type\":\"string\"},{\"name\":\"beneficiary\",\"type\":\"string\"},{\"name\":\"amount\",\"type\":\"int\"},{\"name\":\"payer\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence date;
  @Deprecated public java.lang.CharSequence beneficiary;
  @Deprecated public int amount;
  @Deprecated public java.lang.CharSequence payer;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BankTransaction() {}

  /**
   * All-args constructor.
   * @param date The new value for date
   * @param beneficiary The new value for beneficiary
   * @param amount The new value for amount
   * @param payer The new value for payer
   */
  public BankTransaction(java.lang.CharSequence date, java.lang.CharSequence beneficiary, java.lang.Integer amount, java.lang.CharSequence payer) {
    this.date = date;
    this.beneficiary = beneficiary;
    this.amount = amount;
    this.payer = payer;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return date;
    case 1: return beneficiary;
    case 2: return amount;
    case 3: return payer;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: date = (java.lang.CharSequence)value$; break;
    case 1: beneficiary = (java.lang.CharSequence)value$; break;
    case 2: amount = (java.lang.Integer)value$; break;
    case 3: payer = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.CharSequence getDate() {
    return date;
  }

  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.CharSequence value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'beneficiary' field.
   * @return The value of the 'beneficiary' field.
   */
  public java.lang.CharSequence getBeneficiary() {
    return beneficiary;
  }

  /**
   * Sets the value of the 'beneficiary' field.
   * @param value the value to set.
   */
  public void setBeneficiary(java.lang.CharSequence value) {
    this.beneficiary = value;
  }

  /**
   * Gets the value of the 'amount' field.
   * @return The value of the 'amount' field.
   */
  public java.lang.Integer getAmount() {
    return amount;
  }

  /**
   * Sets the value of the 'amount' field.
   * @param value the value to set.
   */
  public void setAmount(java.lang.Integer value) {
    this.amount = value;
  }

  /**
   * Gets the value of the 'payer' field.
   * @return The value of the 'payer' field.
   */
  public java.lang.CharSequence getPayer() {
    return payer;
  }

  /**
   * Sets the value of the 'payer' field.
   * @param value the value to set.
   */
  public void setPayer(java.lang.CharSequence value) {
    this.payer = value;
  }

  /**
   * Creates a new BankTransaction RecordBuilder.
   * @return A new BankTransaction RecordBuilder
   */
  public static io.functionaldata.domain.BankTransaction.Builder newBuilder() {
    return new io.functionaldata.domain.BankTransaction.Builder();
  }

  /**
   * Creates a new BankTransaction RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BankTransaction RecordBuilder
   */
  public static io.functionaldata.domain.BankTransaction.Builder newBuilder(io.functionaldata.domain.BankTransaction.Builder other) {
    return new io.functionaldata.domain.BankTransaction.Builder(other);
  }

  /**
   * Creates a new BankTransaction RecordBuilder by copying an existing BankTransaction instance.
   * @param other The existing instance to copy.
   * @return A new BankTransaction RecordBuilder
   */
  public static io.functionaldata.domain.BankTransaction.Builder newBuilder(io.functionaldata.domain.BankTransaction other) {
    return new io.functionaldata.domain.BankTransaction.Builder(other);
  }

  /**
   * RecordBuilder for BankTransaction instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BankTransaction>
    implements org.apache.avro.data.RecordBuilder<BankTransaction> {

    private java.lang.CharSequence date;
    private java.lang.CharSequence beneficiary;
    private int amount;
    private java.lang.CharSequence payer;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.functionaldata.domain.BankTransaction.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.beneficiary)) {
        this.beneficiary = data().deepCopy(fields()[1].schema(), other.beneficiary);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.payer)) {
        this.payer = data().deepCopy(fields()[3].schema(), other.payer);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BankTransaction instance
     * @param other The existing instance to copy.
     */
    private Builder(io.functionaldata.domain.BankTransaction other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.date)) {
        this.date = data().deepCopy(fields()[0].schema(), other.date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.beneficiary)) {
        this.beneficiary = data().deepCopy(fields()[1].schema(), other.beneficiary);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.payer)) {
        this.payer = data().deepCopy(fields()[3].schema(), other.payer);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.CharSequence getDate() {
      return date;
    }

    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public io.functionaldata.domain.BankTransaction.Builder setDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.date = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public io.functionaldata.domain.BankTransaction.Builder clearDate() {
      date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'beneficiary' field.
      * @return The value.
      */
    public java.lang.CharSequence getBeneficiary() {
      return beneficiary;
    }

    /**
      * Sets the value of the 'beneficiary' field.
      * @param value The value of 'beneficiary'.
      * @return This builder.
      */
    public io.functionaldata.domain.BankTransaction.Builder setBeneficiary(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.beneficiary = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'beneficiary' field has been set.
      * @return True if the 'beneficiary' field has been set, false otherwise.
      */
    public boolean hasBeneficiary() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'beneficiary' field.
      * @return This builder.
      */
    public io.functionaldata.domain.BankTransaction.Builder clearBeneficiary() {
      beneficiary = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * @return The value.
      */
    public java.lang.Integer getAmount() {
      return amount;
    }

    /**
      * Sets the value of the 'amount' field.
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public io.functionaldata.domain.BankTransaction.Builder setAmount(int value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * @return This builder.
      */
    public io.functionaldata.domain.BankTransaction.Builder clearAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'payer' field.
      * @return The value.
      */
    public java.lang.CharSequence getPayer() {
      return payer;
    }

    /**
      * Sets the value of the 'payer' field.
      * @param value The value of 'payer'.
      * @return This builder.
      */
    public io.functionaldata.domain.BankTransaction.Builder setPayer(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.payer = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'payer' field has been set.
      * @return True if the 'payer' field has been set, false otherwise.
      */
    public boolean hasPayer() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'payer' field.
      * @return This builder.
      */
    public io.functionaldata.domain.BankTransaction.Builder clearPayer() {
      payer = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public BankTransaction build() {
      try {
        BankTransaction record = new BankTransaction();
        record.date = fieldSetFlags()[0] ? this.date : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.beneficiary = fieldSetFlags()[1] ? this.beneficiary : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.lang.Integer) defaultValue(fields()[2]);
        record.payer = fieldSetFlags()[3] ? this.payer : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
